import {degrees} from "../math.js"; // 180/pi

// Truncated icosahedron
// 60 vertex, 20+12 faces, 90 edges
// see
// https://en.wikipedia.org/wiki/Truncated_icosahedron
// https://www.cs.odu.edu/~salam/wsdl/inforet/wikihtml/Truncated_icosahedron.html
// https://people.physics.anu.edu.au/~mxk121/research/polyhedron.html?poly=32
// https://polyhedra.tessera.li/truncated-icosahedron/info

var f = (1 + Math.sqrt(5)) / 2;

var cartesianCoords = [
[  0, 1, 3 * f],
[  0, 1,-3 * f],
[  0,-1, 3 * f],
[  0,-1,-3 * f],
[  1, 3 * f, 0],
[  1,-3 * f, 0],
[ -1, 3 * f, 0],
[ -1,-3 * f, 0],
[  3 * f, 0, 1],
[  3 * f, 0,-1],
[ -3 * f, 0, 1],
[ -3 * f, 0,-1],
[  2, (1 + 2 * f), f],
[  2, (1 + 2 * f),-f],
[  2,-(1 + 2 * f), f],
[  2,-(1 + 2 * f),-f],
[ -2, (1 + 2 * f), f],
[ -2, (1 + 2 * f),-f],
[ -2,-(1 + 2 * f), f],
[ -2,-(1 + 2 * f),-f],
[  (1 + 2 * f), f, 2],
[  (1 + 2 * f), f,-2],
[  (1 + 2 * f),-f, 2],
[  (1 + 2 * f),-f,-2],
[ -(1 + 2 * f), f, 2],
[ -(1 + 2 * f), f,-2],
[ -(1 + 2 * f),-f, 2],
[ -(1 + 2 * f),-f,-2],
[  f, 2, (1 + 2 * f)],
[  f, 2,-(1 + 2 * f)],
[  f,-2, (1 + 2 * f)],
[  f,-2,-(1 + 2 * f)],
[ -f, 2, (1 + 2 * f)],
[ -f, 2,-(1 + 2 * f)],
[ -f,-2, (1 + 2 * f)],
[ -f,-2,-(1 + 2 * f)],
[  1, (2 + f), 2 * f],
[  1, (2 + f),-2 * f],
[  1,-(2 + f), 2 * f],
[  1,-(2 + f),-2 * f],
[ -1, (2 + f), 2 * f],
[ -1, (2 + f),-2 * f],
[ -1,-(2 + f), 2 * f],
[ -1,-(2 + f),-2 * f],
[  (2 + f), 2 * f, 1],
[  (2 + f), 2 * f,-1],
[  (2 + f),-2 * f, 1],
[  (2 + f),-2 * f,-1],
[ -(2 + f), 2 * f, 1],
[ -(2 + f), 2 * f,-1],
[ -(2 + f),-2 * f, 1],
[ -(2 + f),-2 * f,-1],
[  2 * f, 1, (2 + f)],
[  2 * f, 1,-(2 + f)],
[  2 * f,-1, (2 + f)],
[  2 * f,-1,-(2 + f)],
[ -2 * f, 1, (2 + f)],
[ -2 * f, 1,-(2 + f)],
[ -2 * f,-1, (2 + f)],
[ -2 * f,-1,-(2 + f)]
];

var c = cartesianCoords;
// edges: pair of vertices with max scalar product (22.56)
// for (i=0; i < 60; ++i) for (j=i+1; j < 60; ++j) { z = p(c[i],c[j]); if (z>21) edges.push([i,j])}
var edges = [
  [0,2],[0,28],[0,32],[1,3],[1,29],[1,33],[2,30],[2,34],[3,31],[3,35],[4,6],[4,12],[4,13],[5,7],[5,14],[5,15],[6,16],[6,17],[7,18],[7,19],[8,9],[8,20],[8,22],[9,21],[9,23],[10,11],[10,24],[10,26],[11,25],[11,27],[12,36],[12,44],[13,37],[13,45],[14,38],[14,46],[15,39],[15,47],[16,40],[16,48],[17,41],[17,49],[18,42],[18,50],[19,43],[19,51],[20,44],[20,52],[21,45],[21,53],[22,46],[22,54],[23,47],[23,55],[24,48],[24,56],[25,49],[25,57],[26,50],[26,58],[27,51],[27,59],[28,36],[28,52],[29,37],[29,53],[30,38],[30,54],[31,39],[31,55],[32,40],[32,56],[33,41],[33,57],[34,42],[34,58],[35,43],[35,59],[36,40],[37,41],[38,42],[39,43],[44,45],[46,47],[48,49],[50,51],[52,54],[53,55],[56,58],[57,59]
];

// vertices graph
var graph = c.map(() => []);
edges.forEach(e => { graph[e[0]].push(e[1]); graph[e[1]].push(e[0]); });


var faces = [
  // hexagons
  [56,58,34,2,0,32], // 0
  [28,0,2,30,54,52],
  [30,38,14,46,22,54],
  [38,42,18,7,5,14],
  [12,36,28,52,20,44],
  [6,16,40,36,12,4], // 5
  [48,24,56,32,40,16],
  [25,11,10,24,48,49],
  [11,27,51,50,26,10],
  [58,26,50,18,42,34],
  [51,27,59,35,43,19], // 10
  [59,57,33,1,3,35],
  [5,7,19,43,39,15],
  [47,15,39,31,55,23],
  [22,46,47,23,9,8],
  [57,25,49,17,41,33], // 15
  [6,4,13,37,41,17],
  [37,13,45,21,53,29],
  [20,8,9,21,45,44],
  [55,31,3,1,29,53],
  // pentagons
  [57,59,27,11,25], // 20
  [50,51,19,7,18],
  [34,42,38,30,2],
  [49,48,16,6,17],
  [4,12,44,45,13],
  [41,37,29,1,33], // 25
  [52,54,22,8,20],
  [43,35,3,31,39],
  [14,5,15,47,46],
  [24,10,26,58,56],
  [40,32,0,28,36], // 30
  [9,23,55,53,21]
];

function cartesian2polar(x, y, z) {
  // here we are not interested in radius
  return [
    Math.atan2(y, x) * degrees,
    Math.atan2(Math.sqrt(x * x + y * y), z) * degrees,
  ]
}

var truncIco = cartesianCoords.map(v => cartesian2polar(v[0], v[1], v[2]));

// creating a list of lists of vertices
export default
faces.map(function(face) {
  return face.map(function(i) {
    return truncIco[i];
  });
});

